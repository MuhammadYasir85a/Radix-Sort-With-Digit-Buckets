import pygame
import sys

# Initialize Pygame
pygame.init()

# Get the current display width and height for full screen window size
infoObject = pygame.display.Info()
WIDTH, HEIGHT = infoObject.current_w, infoObject.current_h

# Create the main window with the full screen size
window = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption('Radix Sort Simulation')

# Set font styles for rendering text
font = pygame.font.SysFont('Arial', 26, bold=True)
small_font = pygame.font.SysFont('Arial', 20)

# Define color palette used throughout the app (background, boxes, text, highlights)
BACKGROUND_COLOR = (15, 32, 39)
ARRAY_BOX_COLOR = (37, 99, 235)
ARRAY_BOX_BORDER = (59, 130, 246)
INDEX_COLOR = (148, 163, 184)
TEXT_COLOR = (229, 231, 235)
VALUE_COLOR = (226, 232, 240)
HIGHLIGHT_COLOR = (234, 179, 8)
ARROW_COLOR = (156, 163, 175)

# Button class to create interactive buttons with hover and click detection
class Button:
    def __init__(self, text, x, y, width, height, color, text_color, callback=None):
        self.text = text
        self.rect = pygame.Rect(x, y, width, height)  # Position and size of the button
        self.color = color
        self.text_color = text_color
        self.callback = callback  # Function to call on click (if any)

    def draw(self, surface):
        pygame.draw.rect(surface, self.color, self.rect, border_radius=10)  # Draw button background with rounded corners
        pygame.draw.rect(surface, TEXT_COLOR, self.rect, 2, border_radius=10)  # Draw button border
        text_surf = small_font.render(self.text, True, self.text_color)  # Render button text
        text_rect = text_surf.get_rect(center=self.rect.center)  # Center text inside the button
        surface.blit(text_surf, text_rect)  # Draw text on the surface

    # Check if mouse click position is inside the button rectangle
    def is_clicked(self, pos):
        return self.rect.collidepoint(pos)

# Function to render text on screen at specified coordinates with optional color and font
def display_text(text, x, y, color=TEXT_COLOR, font_obj=font):
    label = font_obj.render(text, True, color)
    window.blit(label, (x, y))

# Draw the input array as individual boxes centered horizontally, highlight a specific index if given
def draw_input_array(arr, highlight_index=None, heading="Original Array"):
    # Draw heading centered at the top above the array
    heading_x = WIDTH // 2
    heading_y = 90
    heading_label = font.render(heading, True, TEXT_COLOR)
    heading_rect = heading_label.get_rect(center=(heading_x, heading_y))
    window.blit(heading_label, heading_rect)

    # Calculate total width of all boxes with margin and center horizontally
    box_width = 60
    box_height = 50
    margin = 20
    total_width = (box_width + margin) * len(arr) - margin
    start_x = (WIDTH - total_width) // 2
    y = 120

    # Draw each number in the array as a rounded rectangle box
    for i, num in enumerate(arr):
        x = start_x + i * (box_width + margin)
        # Highlight the box if it corresponds to the highlighted index
        color = HIGHLIGHT_COLOR if i == highlight_index else ARRAY_BOX_COLOR
        border_color = HIGHLIGHT_COLOR if i == highlight_index else ARRAY_BOX_BORDER
        pygame.draw.rect(window, color, (x, y, box_width, box_height), border_radius=12)
        pygame.draw.rect(window, border_color, (x, y, box_width, box_height), 3, border_radius=12)
        num_text = font.render(str(num), True, TEXT_COLOR)
        num_rect = num_text.get_rect(center=(x + box_width // 2, y + box_height // 2))
        window.blit(num_text, num_rect)

# Draw a directional arrow from start_pos to end_pos for visual linking within buckets
def draw_arrow(start_pos, end_pos, color=ARROW_COLOR, arrow_size=10):
    pygame.draw.line(window, color, start_pos, end_pos, 3)  # Draw main arrow line
    direction = (end_pos[0] - start_pos[0], end_pos[1] - start_pos[1])
    length = (direction[0]**2 + direction[1]**2) ** 0.5
    if length == 0:
        return
    unit_dir = (direction[0]/length, direction[1]/length)
    perp_dir = (-unit_dir[1], unit_dir[0])

    # Calculate left and right points for the arrowhead triangle
    left = (end_pos[0] - arrow_size * unit_dir[0] + arrow_size/2 * perp_dir[0],
            end_pos[1] - arrow_size * unit_dir[1] + arrow_size/2 * perp_dir[1])
    right = (end_pos[0] - arrow_size * unit_dir[0] - arrow_size/2 * perp_dir[0],
             end_pos[1] - arrow_size * unit_dir[1] - arrow_size/2 * perp_dir[1])
    pygame.draw.polygon(window, color, [end_pos, left, right])  # Draw arrowhead

# Draw the ten buckets (lists) used in radix sort with numbers inside boxes and arrows connecting them
def draw_lists(buckets, highlight_bucket=None, highlight_value=None):
    box_width = 40
    box_height = 40
    margin_x = 10
    margin_y = 10
    start_x = 50
    start_y = 180

    for i, bucket in enumerate(buckets):
        y = start_y + i * (box_height + margin_y)
        # Highlight bucket index if needed
        index_color = HIGHLIGHT_COLOR if i == highlight_bucket else INDEX_COLOR
        index_text = font.render(f"{i}:", True, index_color)
        window.blit(index_text, (start_x, y + box_height // 4))

        val_start_x = start_x + 40
        prev_center = None
        for j, val in enumerate(bucket):
            x = val_start_x + j * (box_width + margin_x)
            rect = pygame.Rect(x, y, box_width, box_height)

            # Highlight a specific value inside a bucket if specified
            color = HIGHLIGHT_COLOR if (i == highlight_bucket and j == highlight_value) else ARRAY_BOX_COLOR
            border_color = HIGHLIGHT_COLOR if (i == highlight_bucket and j == highlight_value) else ARRAY_BOX_BORDER
            pygame.draw.rect(window, color, rect, border_radius=12)
            pygame.draw.rect(window, border_color, rect, 3, border_radius=12)

            val_text = small_font.render(str(val), True, VALUE_COLOR)
            val_rect = val_text.get_rect(center=rect.center)
            window.blit(val_text, val_rect)

            # Draw arrow connecting this box with the previous one in the same row
            if prev_center:
                start_pos = (prev_center[0] + box_width // 2, prev_center[1])
                end_pos = (rect.centerx - box_width // 2, rect.centery)
                draw_arrow(start_pos, end_pos)
            prev_center = rect.center

# Blocking function waiting for specific key presses to continue or abort the simulation
def wait_for_key(keys):
    clock = pygame.time.Clock()
    while True:
        for event in pygame.event.get():  # Event loop waiting for key press or quit
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
            elif event.type == pygame.KEYDOWN and event.key in keys:  # Return when desired key is pressed
                return event.key
        clock.tick(30)

# Main radix sort visualization logic
def radix_sort_visual(arr, animation_speed=100):
    # Returns a string name for the digit place (units, tens, hundreds, etc.)
    def digit_place_name(exp):
        names = {
            1: "Units place",
            10: "Tens place",
            100: "Hundreds place",
            1000: "Thousands place",
            10000: "Ten-thousands place",
            100000: "Hundred-thousands place",
            1000000: "Millions place"
        }
        return names.get(exp, f"10^{len(str(exp))-1} place")

    # Sorts positive numbers using radix sort visualization step-by-step
    def radix_sort_positive(nums):
        if not nums:
            return []

        max_val = max(nums)  # Find the highest number to determine max digit
        exp = 1  # Start with the least significant digit (units)
        step = 0
        sorted_arr = nums[:]  # Copy the array to avoid modifying original
        paused = True

        # Initial screen showing maximum value and number of digits before sorting
        max_digits = len(str(max_val))
        showing_max = True
        while showing_max:
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    pygame.quit()
                    sys.exit()
                elif event.type == pygame.KEYDOWN:
                    if event.key == pygame.K_RETURN:  # User presses Enter to proceed
                        showing_max = False
                    elif event.key == pygame.K_q:  # Quit the program
                        pygame.quit()
                        sys.exit()

            window.fill(BACKGROUND_COLOR)
            display_text(f"Maximum value in array: {max_val}", 50, 50)
            display_text(f"Number of digits: {max_digits}", 50, 100)
            display_text("Press ENTER to start sorting...", 50, 160, color=HIGHLIGHT_COLOR)
            draw_input_array(nums, heading="Original Array")
            pygame.display.update()

        # Buttons to control animation: Start and Pause
        start_button = Button("Start", WIDTH - 180, 20, 100, 40, (16, 185, 129), TEXT_COLOR)
        pause_button = Button("Pause", WIDTH - 180, 70, 100, 40, (234, 179, 8), TEXT_COLOR)

        # Main loop iterating over each digit place
        while max_val // exp > 0:
            step += 1
            buckets = [[] for _ in range(10)]  # Reset buckets (0-9)
            place_name = digit_place_name(exp)

            # For each number, determine its digit at current exp and append to corresponding bucket
            for i, num in enumerate(sorted_arr):
                digit = (num // exp) % 10
                buckets[digit].append(num)

                frame = 0
                # Animate distribution of numbers into buckets frame by frame
                while frame < 10:
                    for event in pygame.event.get():
                        if event.type == pygame.QUIT:  # Allow quit anytime
                            pygame.quit()
                            sys.exit()
                        elif event.type == pygame.KEYDOWN:
                            if event.key == pygame.K_SPACE:  # Toggle pause with Spacebar
                                paused = not paused
                            elif event.key == pygame.K_q:  # Quit with 'q'
                                pygame.quit()
                                sys.exit()
                            elif event.key == pygame.K_r:  # Restart sorting if user presses 'r'
                                return "restart"
                        elif event.type == pygame.MOUSEBUTTONDOWN:
                            if start_button.is_clicked(event.pos):  # Start button unpauses animation
                                paused = False
                            elif pause_button.is_clicked(event.pos):  # Pause button toggles pause
                                paused = not paused

                    window.fill(BACKGROUND_COLOR)
                    display_text(f"Pass {step} - Sorting by digit at {place_name}", 50, 30)
                    draw_input_array(sorted_arr, highlight_index=i, heading=f"Pass {step}")
                    draw_lists(buckets, highlight_bucket=digit, highlight_value=len(buckets[digit]) - 1)
                    start_button.draw(window)
                    pause_button.draw(window)
                    pygame.display.update()

                    # Only proceed animation frames if not paused
                    if not paused:
                        pygame.time.delay(animation_speed)  # Delay controls speed of animation
                        frame += 1
                    else:
                        pygame.time.delay(100)  # Slow delay while paused

            # Show array and buckets after all items distributed to buckets for this pass
            draw_input_array(sorted_arr, heading=f"Pass {step}")
            draw_lists(buckets)
            start_button.draw(window)
            pause_button.draw(window)
            pygame.display.update()
            wait_for_key([pygame.K_RETURN])  # Wait for user to continue to next pass

            # Collect buckets back into sorted_arr to proceed to next digit pass
            sorted_arr.clear()
            for bucket in buckets:
                sorted_arr.extend(bucket)

            exp *= 10  # Move to next higher digit place

        return sorted_arr

    # Run the positive number radix sort visualization
    sorted_arr = radix_sort_positive(arr)
    window.fill(BACKGROUND_COLOR)
    # Final display of sorted array
    draw_input_array(sorted_arr, heading="Sorted Array")
    pygame.display.update()
    wait_for_key([pygame.K_RETURN])

# Main program loop handling input and user interactions
def main():
    running = True
    user_input = ""  # String for storing raw user input
    numbers = []  # Parsed list of integers from user input
    clock = pygame.time.Clock()
    animation_speed = 100  # Milliseconds delay between animation frames (adjustable)
    input_phase = True  # Flag to indicate if the program is in input mode or sorting mode

    while running:
        window.fill(BACKGROUND_COLOR)
        # Show user prompt or animation speed control depending on phase
        if input_phase:
            display_text("Enter integers separated by commas:", 50, 10, TEXT_COLOR)
            display_text(user_input, 50, 60, TEXT_COLOR)
        else:
            display_text(f"Adjust animation speed: {animation_speed} ms", 50, 10, TEXT_COLOR)

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
            elif event.type == pygame.KEYDOWN:
                if event.key == pygame.K_ESCAPE or event.key == pygame.K_q:  # Quit on ESC or 'q'
                    running = False
                elif input_phase:
                    if event.key == pygame.K_BACKSPACE:  # Handle backspace editing input string
                        user_input = user_input[:-1]
                    elif event.key == pygame.K_c:  # Clear input string on 'c'
                        user_input = ""
                    elif event.key == pygame.K_RETURN:
                        # Parse input string into list of integers; discard invalid input silently
                        try:
                            raw_numbers = [x.strip() for x in user_input.split(',') if x.strip() != '']
                            numbers = [int(num_str) for num_str in raw_numbers]
                            input_phase = False  # Switch to sorting phase
                        except ValueError:
                            pass
                    else:
                        # Append digits, commas, spaces, and minus sign into input string
                        if event.unicode.isdigit() or event.unicode == ',' or event.unicode.isspace() or event.unicode == '-':
                            user_input += event.unicode
                else:
                    # Adjust animation speed with up/down arrows during sorting phase
                    if event.key == pygame.K_UP:
                        animation_speed = max(10, animation_speed - 10)  # Minimum speed 10ms
                    elif event.key == pygame.K_DOWN:
                        animation_speed += 10  # Increase speed delay
                    elif event.key == pygame.K_RETURN:
                        # Start the radix sort visualization with current numbers and speed
                        result = radix_sort_visual(numbers, animation_speed)
                        if result == "restart":  # Restart triggered inside visualization
                            continue
                        # After visualization reset to initial input state
                        user_input = ""
                        numbers = []
                        animation_speed = 100
                        input_phase = True

        pygame.display.update()
        clock.tick(30)  # Cap the frame rate to 30 FPS for smoothness

    pygame.quit()

main()
